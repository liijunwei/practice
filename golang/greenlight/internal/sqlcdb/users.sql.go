// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlcdb

import (
	"context"
	"time"
)

const getByToken = `-- name: GetByToken :one
select
  u.id,
  u.created_at,
  u.name,
  u.email,
  u.password_hash,
  u.status,
  u.version
from
  users u
  inner join tokens t on u.id = t.user_id
where
  t.hash = $1
  and t.scope = $2
  and t.expire_at > $3
`

type GetByTokenParams struct {
	Hash     []byte
	Scope    string
	ExpireAt time.Time
}

type GetByTokenRow struct {
	ID           int64
	CreatedAt    time.Time
	Name         string
	Email        string
	PasswordHash []byte
	Status       string
	Version      int32
}

func (q *Queries) GetByToken(ctx context.Context, arg GetByTokenParams) (GetByTokenRow, error) {
	row := q.db.QueryRowContext(ctx, getByToken, arg.Hash, arg.Scope, arg.ExpireAt)
	var i GetByTokenRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Status,
		&i.Version,
	)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
select
  id,
  name,
  email,
  password_hash,
  status,
  version,
  created_at,
  updated_at
from
  users
where
  email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Status,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
select
  id, name, email, password_hash, status, version, created_at, updated_at
from
  users
where
  id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Status,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
