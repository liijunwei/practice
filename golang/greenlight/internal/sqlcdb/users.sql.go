// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: users.sql

package sqlcdb

import (
	"context"
	"time"
)

const CreateUser = `-- name: CreateUser :one
insert into users(name, email, password_hash, status)
values($1, $2, $3, $4)
returning id, created_at, updated_at, version
`

type CreateUserParams struct {
	Name         string
	Email        string
	PasswordHash []byte
	Status       string
}

type CreateUserRow struct {
	ID        int64
	CreatedAt time.Time
	UpdatedAt time.Time
	Version   int32
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (*CreateUserRow, error) {
	row := q.db.QueryRowContext(ctx, CreateUser,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.Status,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Version,
	)
	return &i, err
}

const GetUserByEmail = `-- name: GetUserByEmail :one
select id, name, email, password_hash, status, version, created_at, updated_at from users where email = $1
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (*User, error) {
	row := q.db.QueryRowContext(ctx, GetUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Status,
		&i.Version,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return &i, err
}

const GetUserByToken = `-- name: GetUserByToken :one
select u.id, u.created_at, u.name, u.email, u.password_hash::bytea password_hash, u.status, u.version
from users u
inner join tokens t on u.id = t.user_id
where
t.hash = $1
and t.scope = $2
and t.expire_at > now()
`

type GetUserByTokenParams struct {
	Hash  []byte
	Scope string
}

type GetUserByTokenRow struct {
	ID           int64
	CreatedAt    time.Time
	Name         string
	Email        string
	PasswordHash []byte
	Status       string
	Version      int32
}

func (q *Queries) GetUserByToken(ctx context.Context, arg *GetUserByTokenParams) (*GetUserByTokenRow, error) {
	row := q.db.QueryRowContext(ctx, GetUserByToken, arg.Hash, arg.Scope)
	var i GetUserByTokenRow
	err := row.Scan(
		&i.ID,
		&i.CreatedAt,
		&i.Name,
		&i.Email,
		&i.PasswordHash,
		&i.Status,
		&i.Version,
	)
	return &i, err
}

const UpdateUser = `-- name: UpdateUser :one
update users
set name=$1, email=$2, password_hash=$3, status=$4, version=version+1, updated_at=now()
where id=$5 and version=$6
returning version
`

type UpdateUserParams struct {
	Name         string
	Email        string
	PasswordHash []byte
	Status       string
	ID           int64
	Version      int32
}

func (q *Queries) UpdateUser(ctx context.Context, arg *UpdateUserParams) (int32, error) {
	row := q.db.QueryRowContext(ctx, UpdateUser,
		arg.Name,
		arg.Email,
		arg.PasswordHash,
		arg.Status,
		arg.ID,
		arg.Version,
	)
	var version int32
	err := row.Scan(&version)
	return version, err
}
