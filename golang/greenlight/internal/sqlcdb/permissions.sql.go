// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: permissions.sql

package sqlcdb

import (
	"context"

	"github.com/lib/pq"
)

const addForUser = `-- name: AddForUser :exec
insert into user_permissions(user_id, permission_id)
select $1, permissions.id from permissions where permissions.code = ANY($2::text[])
`

type AddForUserParams struct {
	UserID int64
	Codes  []string
}

func (q *Queries) AddForUser(ctx context.Context, arg AddForUserParams) error {
	_, err := q.db.ExecContext(ctx, addForUser, arg.UserID, pq.Array(arg.Codes))
	return err
}

const getAllForUser = `-- name: GetAllForUser :many
select perm.code
from permissions perm
inner join user_permissions user_perm on user_perm.permission_id = perm.id
inner join users u on user_perm.user_id = u.id
where u.id = $1
`

func (q *Queries) GetAllForUser(ctx context.Context, userID int64) ([]string, error) {
	rows, err := q.db.QueryContext(ctx, getAllForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []string
	for rows.Next() {
		var code string
		if err := rows.Scan(&code); err != nil {
			return nil, err
		}
		items = append(items, code)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
